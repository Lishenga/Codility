Task description
A non-empty zero-indexed array A consisting of N integers is given. The consecutive elements of array A represent consecutive cars on a road.
Array A contains only 0s and/or 1s:
0 represents a car traveling east,
1 represents a car traveling west.
The goal is to count passing cars. We say that a pair of cars (P, Q), where 0 ≤ P < Q < N, is passing when P is traveling to the east and Q is traveling to the west.
For example, consider array A such that:
  A[0] = 0
  A[1] = 1
  A[2] = 0
  A[3] = 1
  A[4] = 1
We have five pairs of passing cars: (0, 1), (0, 3), (0, 4), (2, 3), (2, 4).
Write a function:
class Solution { public int solution(int[] A); }
that, given a non-empty zero-indexed array A of N integers, returns the number of passing cars.
The function should return −1 if the number of passing cars exceeds 1,000,000,000.
For example, given:
  A[0] = 0
  A[1] = 1
  A[2] = 0
  A[3] = 1
  A[4] = 1
the function should return 5, as explained above.
Assume that:
N is an integer within the range [1..100,000];
each element of array A is an integer within the range [0..1].
Complexity:
expected worst-case time complexity is O(N);
expected worst-case space complexity is O(1), beyond input storage (not counting the storage required for input arguments).
Elements of input arrays can be modified.

Solution:
The naive O(n2) is to go through every element that’s travelling east (a 0), and then go through all the 
elements after it, checking how many are going west (a 1).
This can be improved to O(N) as follows: If we encounter a car going west (a = 1), we know that it passes
with every car before it that was going east (a = 0). By keeping track of how many cars going east we’ve seen
so far, we can easily compute the total number of passing cars. The following Java code scores 100/100 on
Codility

// you can also use imports, for example:
// import java.math.*;
class Solution {
    public int solution(int[] A) {
        // write your code in Java SE 7
        int east=0;
        int total=0;
        for(int i=0;i<A.length;i++){
            if(A[i]==1){
                total=total+east;
            }
            else
            east=east+1;
        }
        if(total>1e9 || total<0)
        return -1;
        else return total;
    }
}
