
A string S consisting of N characters is called properly nested if:
S is empty;
S has the form "(U)" where U is a properly nested string;
S has the form "VW" where V and W are properly nested strings.
For example, string "(()(())())" is properly nested but string "())" isn't.
Write a function:
class Solution { int solution(string S); }
that, given a string S consisting of N characters, returns 1 if string S is properly nested and 0 otherwise.
For example, given S = "(()(())())", the function should return 1 and given S = "())", the function should return 0, as explained above.
Assume that:
N is an integer within the range [0..1,000,000];
string S consists only of the characters "(" and/or ")".
Complexity:
expected worst-case time complexity is O(N);
expected worst-case space complexity is O(1) (not counting the storage required for input arguments).



Solution:
public static void main(String[] args) throws Exception{
	/*Code to test the function AreParanthesesBalanced*/
	BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
	String expression;
	System.out.println("Enter an expression:  "); // input expression from STDIN/Console
	expression=in.readLine();
	if(AreParanthesesBalanced(expression))
		System.out.println("Balanced\n");
	else
		System.out.println("Not Balanced\n");
}
/*
Java Program to check for balanced parentheses in an expression using stack.
Given an expression as string comprising of opening and closing characters
of parentheses - (), curly braces - {} and square brackets - [], we need to 
check whether symbols are balanced or not. 
*/

//Function to check whether two characters are opening 
//and closing of same type. 
public static boolean ArePair(char opening,char closing)
{
	if(opening == '(' && closing == ')') return true;
	else if(opening == '{' && closing == '}') return true;
	else if(opening == '[' && closing == ']') return true;
	return false;
}
public static boolean AreParanthesesBalanced(String string)
{
	char[] exp=string.toCharArray();
	Stack<Character>  S=new Stack<Character>();
	for(int i =0;i<exp.length;i++)
	{
		if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[')
			S.push(exp[i]);
		else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']')
		{
			if(S.empty() || !ArePair(S.peek(),exp[i]))
				return false;
			else
				S.pop();  // Pair Found
		}
	}
	return S.empty() ? true:false;
}
