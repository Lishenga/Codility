Task description
A string S consisting of N characters is considered to be properly nested if any of the following conditions is true:
S is empty;
S has the form "(U)" or "[U]" or "{U}" where U is a properly nested string;
S has the form "VW" where V and W are properly nested strings.
For example, the string "{[()()]}" is properly nested but "([)()]" is not.
Write a function:
class Solution { public int solution(String S); }
that, given a string S consisting of N characters, returns 1 if S is properly nested and 0 otherwise.
For example, given S = "{[()()]}", the function should return 1 and given S = "([)()]", the function should return 0, as explained above.
Assume that:
N is an integer within the range [0..200,000];
string S consists only of the following characters: "(", "{", "[", "]", "}" and/or ")".
Complexity:
expected worst-case time complexity is O(N);
expected worst-case space complexity is O(N) (not counting the storage required for input arguments).

Solution:
// you can also use imports, for example:
// import java.math.*;
import java.util.Stack;
class Solution {
    public int solution(String S) {
        // write your code in Java SE 7
        char[] A=S.toCharArray();
        Stack<Character> s=new Stack<Character>();
        for(int i=0;i<A.length;i++){
            if(A[i]=='{' ||A[i]=='['||A[i]=='('){
                s.push(A[i]);
            }
            if(A[i]=='}' ||A[i]==']'||A[i]==')'){
                if(s.empty()||!arePair(s.peek(),A[i]))
                return 0;
                else
                s.pop();
            }
        }
        return s.empty()?1:0;
    }
    public boolean arePair(char a, char b){
        if(a=='{' && b=='}' || a=='[' && b==']' || a=='(' && b==')')
        return true;
        else return false;
    }
}
